◆ディレクトリ構成
programming-test
├── frontend
│   ├── add
│   │   └── add.html
│   ├── css
│   │   ├── forIndexPage.css
│   │   └── forAddPage.css
│   ├── js
│   │   ├── register_userInfo.js
│   │   ├── delete_userInfo.js
│   │   └── read_userInfo.js
│   └── index.html
├── backend
│   ├── backend.go
│   ├── go.mod
│   └── go.sum
├── docker
│   ├── frontend.Dockerfile
│   ├── backend.Dockerfile
│   └── db.Dockerfile
├── docker-compose.yml
└── Readme.txt

◆概要
フロントエンド・バックエンド・データベースの3つの仮想サーバーをdocker-composeにて起動する想定で作成しました。
docker-compose.ymlファイルからdockerフォルダ内にあるそれぞれのDockerfileを読み込みます。

frontendディレクトリには、html、css、jsファイルを置いています。
backendディレクトリにはgoファイルと実行に必要な関連ファイル(mod、sum)を置いています。
docker-composeのbuildコマンドにて、programming-test以下にあるプログラムを仮想サーバーディレクトリにCOPYして、
そこから処理を動かす想定で作成しております。
データベースに関してはボリュームとしてホストマシンにデータを保持できる設定にしてあります。

ちなみに作成環境はwindows11 homeとVSCodeです。

◆構成について
フロントエンド⇔ホストマシン⇔バックエンド⇔データベース
という構成になっております。
フロントエンドサーバーにはapacheを使用しました。
フロントエンドとバックエンドは同じネットワーク上に置いてもよかったのですが、
色々な記事にフロントエンドとバックエンドは別サーバーで管理するのが現在の主流という内容が書いてあったので、今回は分けました。
本来ならば、フロントエンド⇔バックエンド と直接やり取りできるとよかったのですが、
https://zenn.dev/msksgm/articles/20211206-cannot-communicate-between-api-front
の理由により、断念しました。
フロントエンドサーバーを置かずに、ホストマシンからバックエンド＆データベースサーバーにアクセスする方式でも良かったかも？と後から思ったりもしました…。
想定と違った構成になっていたら、申し訳ございません。

◆確認方法
上記ディレクトリのフォルダを丸ごと任意の場所にコピーしていただき、
ターミナルのcdコマンドにてディレクトリの指定を「programming-test」へとお願いします。
ターミナルにて、「docker-compose up -d --build」を実行していただければ、それぞれの仮想サーバーが立ち上がるかと存じます。
(--buildはキャッシュの影響を受けたくなかったので、オプションとして入れてあります。)

仮想サーバー立ち上がり後は、任意のwebブラウザにて、
「http://localhost:8080/index.html」へとアクセスしていただくと、インデックスページへアクセス出来るかと存じます。
(ChromeとEdgeで動作確認済みです。)

◆所感
webプログラミング未経験ということで、まずは学習や情報の収集に多くの時間を割きました。
調べている時間8割、コーディングしている時間2割といったところです。
dockerの概念を理解するところ、フロントエンドとバックエンドのやり取りの部分に多くの時間をかけてしまいました。
後、地味ながらLinuxコマンドやdockerのコマンド、SQLのクエリ等を毎回調べて覚えるところにも時間を費やしたと思います。

その一方で、html、js、css、go等の言語の学習はスムーズにいったかと思います。
大した処理は書いていないですが、「Cで言うところのアレはgoではどう書くんだ？」といった具合に、
ベースにある言語と比較しながら調べることが出来たのが良かったと思います。

ずっと遊技機業界の開発にいたので、webプログラミングの世界はとても新鮮で楽しんで取り組むことが出来ました！
大変お手数ですが、チェック、レビューお願いいたします。